// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // PostgreSQL for production (Neon)
  url      = env("DATABASE_URL")
  // For development with SQLite: provider = "sqlite"
}

/**
 * ===========================
 * Auth / Users
 * ===========================
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  // relations
  addresses Address[]
  reviews   Review[]
  orders    Order[]
  carts     Cart[] // ✅ reverse side of Cart.user

  // next-auth relations
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ===========================
 * Catalog
 * ===========================
 */
model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  price       Float // SQLite: use Float (not Decimal)
  currency    String   @default("USD")
  featured    Boolean  @default(false)
  benefits    String? // store CSV like "Energy,Cognitive"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images     ProductImage[]
  variants   Variant[]
  reviews    Review[]
  cartItems  CartItem[] // ✅ reverse side of CartItem.product
  orderItems OrderItem[] // ✅ reverse side of OrderItem.product
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  priority  Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Variant {
  id        String  @id @default(cuid())
  name      String // e.g., "60 gummies", "Manuka blend"
  sku       String  @unique
  price     Float
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

/**
 * ===========================
 * Social
 * ===========================
 */
model Review {
  id        String   @id @default(cuid())
  rating    Int
  title     String?
  body      String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

/**
 * ===========================
 * Cart
 * ===========================
 */
model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  unitPrice Float
}

/**
 * ===========================
 * Orders
 * ===========================
 */
model Order {
  id                    String      @id @default(cuid())
  userId                String?
  user                  User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  email                 String
  status                String      @default("pending") // pending|paid|failed|refunded
  totalAmount           Float
  currency              String      @default("USD")
  stripeSessionId       String?     @unique
  stripePaymentIntentId String?
  items                 OrderItem[]
  shipping              Address?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  title     String
  quantity  Int
  unitPrice Float
}

/**
 * ===========================
 * Addresses
 * ===========================
 */
model Address {
  id      String  @id @default(cuid())
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderId String? @unique // ✅ make 1:1 with Order
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)
  name    String
  line1   String
  line2   String?
  city    String
  state   String?
  postal  String
  country String
}
